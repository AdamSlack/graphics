#version 150
uniform float shade;
out vec4 pixelcolour;
void main( )
{


	// Get pixel colour from input shade
	pixelcolour = vec4( cshade, cshade, cshade, 1.0 );

}
//--------------------------------------------------------------------------------------------
// File:		glslvaryingdemo.ps
// Version:		V1.0
//To demonstrate the effect of varying  variables
// Author:		Daniel Rhodes/Richard Cant
// Date:		13/07/2005
// Description:	Texture	Mapping	Pixel Shader in	GLSL
// Notes:		GLSL documentation can be found	at:
//				http://developer.3dlabs.com/openGL2/index.htm
// Varying:		cshade					= output vertex	tex	coords 0
// Uniform:		
// Output:		gl_FragColor					= output vertex	color
//--------------------------------------------------------------------------------------------
/*#version 110
#pragma optimise(off)	// Turn off some (but not all!!!) optimisations,
						// makes more readable ASM
#pragma debug(on)		// Adds extra debug info to output log (ilog_*.txt etc.),
						// need NVemulate.exe to activate on NVIDIA cards

#define NUMINSET 250

uniform sampler2D fMipLevel;
uniform sampler2D fLShape;
uniform float shade;
varying float cshade;
void main( )
{


	// Get pixel colour from input shade
	gl_FragColor = vec4( cshade, cshade, cshade, 1.0 );

}
*/